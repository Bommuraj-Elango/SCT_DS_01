import { useState } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell, LabelList } from 'recharts';

export default function CountryPopulationComparison() {
  const [data, setData] = useState([
    { name: 'Afghanistan', population: 41454.76, color: '#4C78A8' },
    { name: 'Brazil', population: 211140.73, color: '#72B7B2' },
    { name: 'Canada', population: 40097.76, color: '#54A24B' },
    { name: 'Denmark', population: 5946.95, color: '#EECA3B' },
    { name: 'Germany', population: 83280.00, color: '#F58518' },
    { name: 'India', population: 1438069.60, color: '#E45756' }
  ]);

  const [displayUnit, setDisplayUnit] = useState('thousands');
  
  const getFormattedData = () => {
    return data.map(item => {
      let value = item.population;
      let formattedValue = value;
      
      if (displayUnit === 'millions') {
        formattedValue = value / 1000;
      } else if (displayUnit === 'billions') {
        formattedValue = value / 1000000;
      }
      
      return {
        ...item,
        value: formattedValue
      };
    });
  };

  const sortedData = [...getFormattedData()].sort((a, b) => a.value - b.value);
  
  const formatTooltip = (value) => {
    if (displayUnit === 'thousands') {
      return `${(value).toLocaleString()} thousand`;
    } else if (displayUnit === 'millions') {
      return `${value.toLocaleString()} million`;
    } else {
      return `${value.toLocaleString()} billion`;
    }
  };

  const getYAxisLabel = () => {
    if (displayUnit === 'thousands') {
      return 'Population (thousands)';
    } else if (displayUnit === 'millions') {
      return 'Population (millions)';
    } else {
      return 'Population (billions)';
    }
  };

  const hasLargeValueGap = sortedData[sortedData.length - 1].value > sortedData[sortedData.length - 2].value * 5;

  return (
    <div className="flex flex-col items-center w-full p-4 bg-gray-100 rounded-lg">
      <h1 className="text-2xl font-bold mb-2">Country Population Comparison (2023)</h1>
      
      <div className="flex gap-4 mb-4">
        <button 
          className={`px-4 py-2 rounded ${displayUnit === 'thousands' ? 'bg-blue-600 text-white' : 'bg-gray-300'}`}
          onClick={() => setDisplayUnit('thousands')}
        >
          Thousands
        </button>
        <button 
          className={`px-4 py-2 rounded ${displayUnit === 'millions' ? 'bg-blue-600 text-white' : 'bg-gray-300'}`}
          onClick={() => setDisplayUnit('millions')}
        >
          Millions
        </button>
        <button 
          className={`px-4 py-2 rounded ${displayUnit === 'billions' ? 'bg-blue-600 text-white' : 'bg-gray-300'}`}
          onClick={() => setDisplayUnit('billions')}
        >
          Billions
        </button>
      </div>
      
      <div className="w-full h-80 mb-6">
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={sortedData}
            layout="vertical"
            margin={{ top: 5, right: 30, left: 80, bottom: 5 }}
          >
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis type="number" />
            <YAxis 
              type="category" 
              dataKey="name" 
              width={80}
            />
            <Tooltip formatter={(value) => formatTooltip(value)} />
            <Legend />
            <Bar 
              dataKey="value" 
              name="Population" 
              radius={[0, 4, 4, 0]}
            >
              {sortedData.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={entry.color} />
              ))}
              <LabelList 
                dataKey="value" 
                position="right" 
                formatter={(value) => {
                  if (value > 1000 && displayUnit === 'millions') {
                    return `${(value/1000).toFixed(2)}B`;
                  } else if (value > 1000 && displayUnit === 'thousands') {
                    return `${(value/1000).toFixed(2)}M`;
                  } else {
                    return value.toLocaleString();
                  }
                }}
              />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </div>
      
      <div className="text-center p-3 bg-white w-full rounded-lg">
        <p className="text-sm text-gray-600">Data shown for year 2023. Population figures originally in thousands.</p>
        <p className="text-sm text-gray-600">Note the large population difference between India and other countries.</p>
      </div>
    </div>
  );
}
